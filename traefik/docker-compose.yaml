version: '3.9'

################################################################################
# NETWORKS CONFIGURATION
################################################################################

networks:
    traefik:
        driver: bridge
    docker:
        driver: bridge
    internal:
        driver: bridge

################################################################################
# COMMON CONFIGURATION DECLARATION
################################################################################

x-common-keys-core: &common-keys-core
    security_opt:
        - no-new-privileges:true
    restart: always

################################################################################
# SERVICES CONFIGURATION
################################################################################

services:

    ########################################################
    # ROUTING AND SERVING
    ########################################################

    ####################################
    # TRAEFIK (REVERSE PROXY)
    ####################################

    traefik:
        <<: *common-keys-core
        container_name: traefik
        image:          library/traefik:v2.6
        hostname:       ${TRAEFIK_SUBDOMAIN}
        ports:
            -   published: 80
                target:    80
                protocol:  tcp
                mode:      host
            -   published: 443
                target:    443
                protocol:  tcp
                mode:      host
        environment:
            CF_API_EMAIL: ${CLOUDFLARE_EMAIL}
            CF_API_KEY:   ${CLOUDFLARE_API_KEY}
        volumes:
            - ${TRAEFIK_DIRECTORY}/traefik/config:/etc/traefik
            - ${TRAEFIK_DIRECTORY}/traefik/rules:/rules
            - ${TRAEFIK_DIRECTORY}/traefik/logs:/logs
            - ${TRAEFIK_DIRECTORY}/shared:/shared
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ${TRAEFIK_DIRECTORY}/traefik/acme/acme.json:/acme.json
        networks:
            traefik: null
            docker:  null
        depends_on:
            - socket-proxy
            - duckdns
            - oauth
        command:
            # GLOBAL SETTINGS
            - --global.checkNewVersion=true
            - --global.sendAnonymousUsage=false
            # API SETTINGS
            - --api=true
            - --api.dashboard=true
            # LOGGING SETTINGS
            - --log=true
            - --log.level=INFO # DEBUG, INFO, WARN, ERROR, FATAL, PANIC
            - --log.format=COMMON
            - --accessLog=true
            - --accessLog.filePath=/logs/access.log
            - --accessLog.format=JSON
            - --accessLog.bufferingSize=100
            - --accessLog.filters.statusCodes=400-499
            - --accessLog.filters.retryAttempts=true
            - --accessLog.filters.minDuration=10ms
            # PROVIDERS
            - --providers.docker=true
            - --providers.docker.endpoint=tcp://socket-proxy:2375
            - --providers.docker.exposedByDefault=false
            - --providers.docker.network=${COMPOSE_PROJECT_NAME}_traefik
            - --providers.docker.swarmMode=false
            - --providers.file.directory=/rules
            - --providers.file.watch=true
            # ENTRYPOINTS
            - --entryPoints.http.address=:80
            - --entryPoints.https.address=:443
            - --entryPoints.traefik.address=:8080
            - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
            - --entrypoints.https.http.tls.certresolver=dns-cloudflare
            - --entrypoints.https.http.tls.domains[0].main=${DOMAIN_NAME}
            - --entrypoints.https.http.tls.domains[0].sans=*.${DOMAIN_NAME}
            - --entrypoints.https.http.tls.options=tls-opts@file
            # CERTIFICATE RESOLVERS
            - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
            - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90
            # TESTING SETTINGS (COMMENTED OUT BY DEFAULT)
            - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
        labels:
            traefik.enable:                                                   true
            traefik.http.routers.traefik-rtr.rule:                            Host(`${TRAEFIK_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.traefik-rtr.entrypoints:                     https
            traefik.http.routers.traefik-rtr.service:                         api@internal
            traefik.http.routers.http-catchall.entrypoints:                   http
            traefik.http.routers.http-catchall.rule:                          HostRegexp(`{host:.+}`)
            traefik.http.routers.http-catchall.middlewares:                   redirect-to-https
            traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
            traefik.http.routers.traefik-rtr.middlewares:                     chain-oauth-google@file

    ####################################
    # SOCKET-PROXY (DOCKER.SOCK)
    ####################################

    socket-proxy:
        <<: *common-keys-core
        container_name: socket-proxy
        image:          tecnativa/docker-socket-proxy:latest
        privileged:     true
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            docker: null
        environment:
            - LOG_LEVEL=info # debug, info, notice, warning, err, crit, alert, emerg
            - EVENTS=1
            - PING=1
            - VERSION=1
            - AUTH=0
            - SECRETS=0
            - POST=1
            - DELETE=1
            - BUILD=0
            - COMMIT=0
            - CONFIGS=0
            - CONTAINERS=1
            - DISTRIBUTION=0
            - EXEC=0
            - IMAGES=1
            - INFO=1
            - NETWORKS=1
            - NODES=0
            - PLUGINS=0
            - SERVICES=1
            - SESSION=0
            - SWARM=0
            - SYSTEM=0
            - TASKS=1
            - VOLUMES=1

    ########################################################
    # BACK-END APPLICATIONS
    ########################################################

    ####################################
    # OAUTH (GOOGLE OAUTH FOR ADMIN)
    ####################################

    oauth:
        <<: *common-keys-core
        container_name: oauth
        image:          thomseddon/traefik-forward-auth:latest
        hostname:       oauth
        environment:
            PROVIDERS_GOOGLE_CLIENT_ID:     ${GOOGLE_CLIENT_ID}
            PROVIDERS_GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
            SECRET:                         ${OAUTH_SECRET}
            COOKIE_DOMAIN:                  ${DOMAIN_NAME}
            INSECURE_COOKIE:                "false"
            AUTH_HOST:                      oauth.${DOMAIN_NAME}
            URL_PATH:                       /_oauth
            WHITELIST:                      ${OAUTH_WHITELIST}
            LOG_LEVEL:                      DEBUG
            LIFETIME:                       2592000
            DEFAULT_ACTION:                 auth
            DEFAULT_PROVIDER:               google
        networks:
            traefik: null
        depends_on:
            - duckdns
        labels:
            traefik.enable:                                           true
            traefik.http.routers.oauth-rtr.rule:                      Host(`oauth.${DOMAIN_NAME}`)
            traefik.http.routers.oauth-rtr.entrypoints:               https
            traefik.http.routers.oauth-rtr.service:                   oauth-svc
            traefik.http.services.oauth-svc.loadbalancer.server.port: 4181
            traefik.http.routers.oauth-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # DUCKDNS (DYNAMIC DNS MONITORING)
    ####################################

    duckdns:
        <<: *common-keys-core
        container_name: duckdns
        image:          linuxserver/duckdns:latest
        environment:
            PUID:       ${PUID}
            PGID:       ${PGID}
            TZ:         ${TZ}
            SUBDOMAINS: ${DUCKDNS_SUBDOMAIN}
            TOKEN:      ${DUCKDNS_TOKEN}
        networks:
            internal: null
        labels:
            com.ouroboros.enable: "true"
